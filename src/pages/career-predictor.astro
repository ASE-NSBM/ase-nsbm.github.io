<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tech Career Compass</title>
    <style>
      :root {
        --primary: #39ff14; /* Neon green */
        --primary-dark: #2bd411;
        --primary-light: #e8ffdb;
        --secondary: #6366f1;
        --bg-light: #f8fafc;
        --bg-dark: #1a1a1a;
        --text-dark: #1e293b;
        --text-light: #f8fafc;
        --success: #10b981;
        --warning: #f59e0b;
        --error: #ef4444;
        --glow-dark:
          0 0 5px var(--primary), 0 0 10px var(--primary),
          0 0 15px var(--primary), 0 0 20px var(--primary);
        --glow-light: 0 0 2px rgba(0, 0, 0, 0.3);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        transition:
          background-color 0.3s,
          color 0.3s;
      }

      body {
        background-color: var(--bg-light);
        color: var(--text-dark);
        line-height: 1.6;
      }

      body.dark-mode {
        background-color: var(--bg-dark);
        color: var(--text-light);
      }

      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem 1rem;
      }

      header {
        text-align: center;
        margin-bottom: 2rem;
      }

      header h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        color: var(--primary);
        text-shadow: var(--glow-dark);
      }

      .dark-mode header h1 {
        text-shadow: var(--glow-dark);
      }

      .light-mode header h1 {
        color: #0a8f00;
        text-shadow: var(--glow-light);
      }

      header p {
        font-size: 1.1rem;
        color: var(--text-dark);
        opacity: 0.8;
      }

      .dark-mode header p {
        color: var(--text-light);
      }

      .card {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        margin-bottom: 2rem;
      }

      .dark-mode .card {
        background-color: #2d2d2d;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      }

      .progress-bar {
        height: 8px;
        background-color: #e2e8f0;
        border-radius: 4px;
        margin-bottom: 2rem;
        overflow: hidden;
      }

      .dark-mode .progress-bar {
        background-color: #333;
      }

      .progress-fill {
        height: 100%;
        background-color: var(--primary);
        transition: width 0.3s ease;
      }

      .dark-mode .progress-fill {
        box-shadow: var(--glow-dark);
      }

      .light-mode .progress-fill {
        box-shadow: var(--glow-light);
      }

      .question {
        margin-bottom: 1.5rem;
      }

      .question h2 {
        font-size: 1.4rem;
        margin-bottom: 1rem;
        color: var(--primary);
      }

      .dark-mode .question h2 {
        text-shadow: var(--glow-dark);
      }

      .light-mode .question h2 {
        color: #0a8f00;
        text-shadow: var(--glow-light);
      }

      .options {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }

      .option {
        position: relative;
        padding: 1rem 1rem 1rem 2.5rem;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s;
      }

      .dark-mode .option {
        border-color: #444;
        background-color: #333;
      }

      .option:hover {
        border-color: var(--primary);
        box-shadow: var(--glow-light);
      }

      .dark-mode .option:hover {
        background-color: rgba(57, 255, 20, 0.1);
        box-shadow: var(--glow-dark);
      }

      .option.selected {
        border-color: var(--primary);
        background-color: var(--primary-light);
        box-shadow: var(--glow-light);
      }

      .dark-mode .option.selected {
        background-color: rgba(57, 255, 20, 0.2);
        box-shadow: var(--glow-dark);
      }

      .option input[type='radio'] {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
      }

      .option-radio {
        position: absolute;
        top: 1rem;
        left: 1rem;
        width: 1.2rem;
        height: 1.2rem;
        border: 2px solid #ccc;
        border-radius: 50%;
        transition: all 0.2s;
      }

      .option.selected .option-radio {
        border-color: var(--primary);
        background-color: var(--primary);
      }

      .option-radio::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 0.6rem;
        height: 0.6rem;
        border-radius: 50%;
        background-color: white;
        opacity: 0;
        transition: opacity 0.2s;
      }

      .option.selected .option-radio::after {
        opacity: 1;
      }

      /* Rating scale styles */
      .rating-scale {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin: 1.5rem 0;
      }

      .rating-options {
        display: flex;
        justify-content: space-between;
        gap: 0.5rem;
      }

      .rating-option {
        flex: 1;
        text-align: center;
      }

      .rating-option input[type='radio'] {
        display: none;
      }

      .rating-option label {
        display: block;
        padding: 0.5rem;
        border: 2px solid #e2e8f0;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
      }

      .dark-mode .rating-option label {
        border-color: #444;
        background-color: #333;
      }

      .rating-option label:hover {
        border-color: var(--primary);
      }

      .rating-option input[type='radio']:checked + label {
        border-color: var(--primary);
        background-color: var(--primary-light);
      }

      .dark-mode .rating-option input[type='radio']:checked + label {
        background-color: rgba(57, 255, 20, 0.2);
      }

      .rating-labels {
        display: flex;
        justify-content: space-between;
        margin-top: 0.5rem;
        font-size: 0.9rem;
        color: #666;
      }

      .dark-mode .rating-labels {
        color: #aaa;
      }

      .buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 2rem;
      }

      button {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
      }

      button.primary {
        background-color: var(--primary);
        color: black;
      }

      .dark-mode button.primary {
        box-shadow: var(--glow-dark);
      }

      .light-mode button.primary {
        box-shadow: var(--glow-light);
      }

      button.primary:hover {
        background-color: var(--primary-dark);
      }

      button.secondary {
        background-color: #e2e8f0;
        color: var(--text-dark);
      }

      .dark-mode button.secondary {
        background-color: #444;
        color: var(--text-light);
      }

      button.secondary:hover {
        background-color: #cbd5e1;
      }

      .dark-mode button.secondary:hover {
        background-color: #555;
      }

      button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
      }

      .results {
        display: none;
      }

      .results.active {
        display: block;
      }

      .results h2 {
        font-size: 1.8rem;
        margin-bottom: 1.5rem;
        color: var(--primary);
        text-align: center;
      }

      .dark-mode .results h2 {
        text-shadow: var(--glow-dark);
      }

      .light-mode .results h2 {
        color: #0a8f00;
        text-shadow: var(--glow-light);
      }

      .career-match {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-bottom: 1.5rem;
        padding: 1.5rem;
        border-radius: 8px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      }

      .dark-mode .career-match {
        background-color: #2d2d2d;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
      }

      .match-info {
        flex: 1;
      }

      .match-info h3 {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
        color: var(--primary);
      }

      .dark-mode .match-info h3 {
        text-shadow: var(--glow-dark);
      }

      .light-mode .match-info h3 {
        color: #0a8f00;
        text-shadow: var(--glow-light);
      }

      .match-info p {
        color: var(--text-dark);
        opacity: 0.8;
        font-size: 0.95rem;
      }

      .dark-mode .match-info p {
        color: var(--text-light);
      }

      .match-details {
        margin-top: 0.75rem;
        font-size: 0.9rem;
      }

      .match-details strong {
        color: var(--primary);
      }

      .dark-mode .match-details strong {
        text-shadow: var(--glow-dark);
      }

      .light-mode .match-details strong {
        color: #0a8f00;
        text-shadow: var(--glow-light);
      }

      .skill-tag {
        display: inline-block;
        background-color: rgba(99, 102, 241, 0.1);
        color: var(--secondary);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.85rem;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
      }

      .dark-mode .skill-tag {
        background-color: rgba(99, 102, 241, 0.2);
      }

      .restart-btn {
        display: block;
        width: fit-content;
        margin: 2rem auto 0;
      }

      .theme-toggle {
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--primary);
        color: black;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 100;
      }

      .dark-mode .theme-toggle {
        box-shadow: var(--glow-dark);
      }

      .light-mode .theme-toggle {
        box-shadow: var(--glow-light);
      }

      .validation-message {
        color: var(--error);
        margin-top: 0.5rem;
        font-size: 0.9rem;
        display: none;
      }

      /* Medal styles for results */
      .medal {
        font-size: 1.5rem;
        margin-right: 0.5rem;
      }
    </style>
  </head>
  <body class="light-mode">
    <button class="theme-toggle" id="theme-toggle">🌓</button>
    <div class="container">
      <header>
        <h1>Tech Career Compass</h1>
        <p>
          Discover the perfect IT career path based on your skills and interests
        </p>
      </header>

      <div class="card" id="quiz-container">
        <div class="progress-bar">
          <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
        </div>

        <div id="question-container"></div>
        <div class="validation-message" id="validation-message">
          Please select an option before proceeding.
        </div>

        <div class="buttons">
          <button id="prev-btn" class="secondary" disabled>Previous</button>
          <button id="next-btn" class="primary">Next</button>
        </div>
      </div>

      <div class="card results" id="results-container">
        <h2>Your Top 3 Career Matches</h2>
        <div id="results-content"></div>
        <button id="restart-btn" class="primary restart-btn">Start Over</button>
      </div>
    </div>

    <script>
      // Quiz questions
      const questions = [
        {
          id: 'problemSolving',
          question: 'How much do you enjoy solving complex logical problems?',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'mathematics',
          question:
            'Rate your interest in mathematics and statistical analysis:',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'creativity',
          question: 'How important is creative expression in your work?',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'teamwork',
          question:
            'Do you prefer working independently or in collaborative teams?',
          type: 'options',
          options: [
            { text: 'Strongly prefer working independently', value: 1 },
            { text: 'Somewhat prefer working independently', value: 3 },
            { text: 'Equal mixture of both', value: 5 },
            { text: 'Somewhat prefer working in teams', value: 7 },
            { text: 'Strongly prefer working in teams', value: 10 }
          ]
        },
        {
          id: 'programming',
          question: 'How much do you enjoy writing code and creating software?',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'design',
          question: 'Rate your interest in visual design and user experience:',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'security',
          question:
            'How interested are you in cybersecurity and protecting systems?',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'data',
          question: 'How much do you enjoy analyzing data to extract insights?',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'hardware',
          question:
            'Rate your interest in computer hardware and infrastructure:',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'leadership',
          question: 'How interested are you in leading projects or teams?',
          type: 'rating',
          min: 1,
          max: 10
        },
        {
          id: 'learningStyle',
          question: 'What learning approach do you prefer?',
          type: 'options',
          options: [
            {
              text: 'Practical, hands-on learning by doing',
              value: 'practical'
            },
            {
              text: 'Theoretical understanding of concepts and principles',
              value: 'theoretical'
            },
            {
              text: 'Balanced approach of both theory and practice',
              value: 'balanced'
            }
          ]
        },
        {
          id: 'workEnvironment',
          question: 'What type of work environment appeals to you most?',
          type: 'options',
          options: [
            { text: 'Corporate/enterprise setting', value: 'corporate' },
            { text: 'Startup/entrepreneurial environment', value: 'startup' },
            { text: 'Research or academic setting', value: 'research' },
            { text: 'Freelance/independent consulting', value: 'freelance' }
          ]
        }
      ]

      // Career paths data with normalized weights matching logic
      const careerPaths = [
        {
          title: 'Software Developer',
          description: 'Design, build and maintain software applications',
          degrees: ['Software Engineering', 'Computer Science'],
          match: (answers) => {
            const score =
              answers.programming * 4 +
              answers.problemSolving * 4 +
              answers.mathematics * 2
            return Math.min(100, Math.round(score))
          },
          skills: ['Programming', 'Problem-solving', 'Software design'],
          details:
            'Software Developers create applications that allow users to perform specific tasks or systems that run devices and networks. Ideal for those who enjoy logical thinking and coding.'
        },
        {
          title: 'UX/UI Designer',
          description: 'Create intuitive and appealing user interfaces',
          degrees: ['Human-Computer Interaction', 'Graphic Design'],
          match: (answers) => {
            const score =
              answers.design * 5 + answers.creativity * 4 + answers.teamwork * 1
            return Math.min(100, Math.round(score))
          },
          skills: ['Visual design', 'User research', 'Prototyping'],
          details:
            'UX/UI Designers focus on creating intuitive and visually appealing interfaces. Perfect for those with a blend of creativity and technical understanding.'
        },
        {
          title: 'Data Scientist',
          description:
            'Extract insights from complex datasets using statistical methods',
          degrees: ['Data Science', 'Computer Science', 'Statistics'],
          match: (answers) => {
            const score =
              answers.data * 5 +
              answers.mathematics * 3 +
              answers.programming * 2
            return Math.min(100, Math.round(score))
          },
          skills: [
            'Statistical analysis',
            'Machine learning',
            'Data visualization'
          ],
          details:
            'Data Scientists analyze complex datasets to extract meaningful insights. Suited for those who enjoy mathematics, statistics, and uncovering patterns in data.'
        },
        {
          title: 'Network Engineer',
          description: 'Design and implement computer networks',
          degrees: ['Computer Networking', 'Computer Science'],
          match: (answers) => {
            const score =
              answers.hardware * 5 +
              answers.problemSolving * 3 +
              answers.security * 2
            return Math.min(100, Math.round(score))
          },
          skills: ['Network design', 'Troubleshooting', 'System configuration'],
          details:
            'Network Engineers design and maintain the infrastructure that allows computers to communicate. Great for those interested in hardware and systems.'
        },
        {
          title: 'Cybersecurity Analyst',
          description: 'Protect systems and networks from security threats',
          degrees: ['Cybersecurity', 'Computer Science'],
          match: (answers) => {
            const score =
              answers.security * 6 +
              answers.problemSolving * 3 +
              answers.hardware * 1
            return Math.min(100, Math.round(score))
          },
          skills: [
            'Security assessment',
            'Threat analysis',
            'Incident response'
          ],
          details:
            'Cybersecurity Analysts protect digital assets from threats. Ideal for those who enjoy problem-solving in a security context and staying ahead of emerging threats.'
        },
        {
          title: 'IT Project Manager',
          description: 'Lead technology projects and teams',
          degrees: ['Technology Management', 'Business Administration'],
          match: (answers) => {
            const score =
              answers.leadership * 5 +
              answers.teamwork * 3 +
              answers.programming * 1 +
              answers.data * 1
            return Math.min(100, Math.round(score))
          },
          skills: ['Project planning', 'Team leadership', 'Communication'],
          details:
            'IT Project Managers coordinate resources, timelines, and teams to deliver technical projects. Perfect for those who enjoy leadership and organizing complex initiatives.'
        },
        {
          title: 'Machine Learning Engineer',
          description: 'Build AI systems and intelligent applications',
          degrees: ['Computer Science', 'Artificial Intelligence'],
          match: (answers) => {
            const score =
              answers.mathematics * 4 +
              answers.programming * 3 +
              answers.data * 3
            return Math.min(100, Math.round(score))
          },
          skills: ['ML algorithms', 'Neural networks', 'Model optimization'],
          details:
            'Machine Learning Engineers build systems that can learn from data. Ideal for those with strong mathematical skills and interest in artificial intelligence.'
        },
        {
          title: 'DevOps Engineer',
          description: 'Integrate development and operations processes',
          degrees: [
            'Software Engineering',
            'Computer Science',
            'Information Technology'
          ],
          match: (answers) => {
            const score =
              answers.problemSolving * 4 +
              answers.hardware * 3 +
              answers.programming * 3
            return Math.min(100, Math.round(score))
          },
          skills: ['CI/CD pipelines', 'Cloud infrastructure', 'Automation'],
          details:
            'DevOps Engineers bridge the gap between software development and IT operations. Great for those who enjoy both coding and system administration.'
        },
        {
          title: 'Database Administrator',
          description: 'Design and maintain database systems',
          degrees: ['Computer Science', 'Information Systems', 'Data Science'],
          match: (answers) => {
            const score =
              answers.data * 5 + answers.security * 3 + answers.programming * 2
            return Math.min(100, Math.round(score))
          },
          skills: ['Database design', 'Query optimization', 'Data integrity'],
          details:
            'Database Administrators organize and ensure the performance of database systems. Suited for those who enjoy working with structured data and maintaining critical systems.'
        },
        {
          title: 'Systems Analyst',
          description: 'Analyze and improve IT systems and processes',
          degrees: ['Information Systems', 'Business Technology'],
          match: (answers) => {
            const score =
              answers.problemSolving * 5 +
              answers.teamwork * 3 +
              answers.data * 2
            return Math.min(100, Math.round(score))
          },
          skills: [
            'Requirements analysis',
            'Process improvement',
            'System evaluation'
          ],
          details:
            'Systems Analysts assess business needs and recommend IT solutions. Great for those who enjoy analyzing processes and implementing improvements.'
        },
        {
          title: 'Cloud Solutions Architect',
          description: 'Design cloud-based infrastructure and solutions',
          degrees: [
            'Computer Science',
            'Cloud Computing',
            'Information Technology'
          ],
          match: (answers) => {
            const score =
              answers.problemSolving * 4 +
              answers.hardware * 3 +
              answers.programming * 3
            return Math.min(100, Math.round(score))
          },
          skills: ['Cloud platforms', 'Solution design', 'System integration'],
          details:
            'Cloud Solutions Architects design scalable and resilient cloud environments. Ideal for those interested in modern infrastructure and distributed systems.'
        },
        {
          title: 'Business Intelligence Analyst',
          description: 'Transform data into actionable business insights',
          degrees: [
            'Business Analytics',
            'Data Science',
            'Information Systems'
          ],
          match: (answers) => {
            const score =
              answers.data * 5 + answers.mathematics * 3 + answers.teamwork * 2
            return Math.min(100, Math.round(score))
          },
          skills: ['Data analysis', 'Dashboard creation', 'Business acumen'],
          details:
            'BI Analysts convert complex data into business insights. Perfect for those who enjoy analyzing data while understanding its business implications.'
        }
      ]

      // Application state
      let currentQuestionIndex = 0
      const userAnswers = {}

      // DOM elements
      const questionContainer = document.getElementById('question-container')
      const progressFill = document.getElementById('progress-fill')
      const prevButton = document.getElementById('prev-btn')
      const nextButton = document.getElementById('next-btn')
      const quizContainer = document.getElementById('quiz-container')
      const resultsContainer = document.getElementById('results-container')
      const resultsContent = document.getElementById('results-content')
      const restartButton = document.getElementById('restart-btn')
      const themeToggle = document.getElementById('theme-toggle')
      const validationMessage = document.getElementById('validation-message')

      // Initialize the quiz
      function initQuiz() {
        // Check for saved theme preference
        if (localStorage.getItem('darkMode') === 'true') {
          document.body.classList.add('dark-mode')
          document.body.classList.remove('light-mode')
        } else {
          document.body.classList.add('light-mode')
          document.body.classList.remove('dark-mode')
        }

        renderQuestion(currentQuestionIndex)
        updateProgressBar()
        updateNavigationButtons()

        prevButton.addEventListener('click', goToPreviousQuestion)
        nextButton.addEventListener('click', goToNextQuestion)
        restartButton.addEventListener('click', restartQuiz)
        themeToggle.addEventListener('click', toggleTheme)
      }

      // Toggle dark/light theme
      function toggleTheme() {
        document.body.classList.toggle('dark-mode')
        document.body.classList.toggle('light-mode')
        const isDarkMode = document.body.classList.contains('dark-mode')
        localStorage.setItem('darkMode', isDarkMode)
      }

      // Render current question
      function renderQuestion(index) {
        const question = questions[index]
        let html = ''

        html += `<div class="question">
                <h2>${index + 1}. ${question.question}</h2>
            `

        if (question.type === 'rating') {
          html += `
                <div class="rating-scale">
                    <div class="rating-options">
                        ${Array.from(
                          { length: question.max - question.min + 1 },
                          (_, i) => {
                            const value = i + question.min
                            const isChecked = userAnswers[question.id] === value
                            return `
                            <div class="rating-option">
                                <input type="radio" id="${question.id}-${value}" name="${question.id}" value="${value}" ${isChecked ? 'checked' : ''}>
                                <label for="${question.id}-${value}">${value}</label>
                            </div>
                          `
                          }
                        ).join('')}
                    </div>
                    <div class="rating-labels">
                        <span>Low</span>
                        <span>High</span>
                    </div>
                </div>
                `
        } else if (question.type === 'options') {
          html += `<div class="options">`
          question.options.forEach((option) => {
            const isSelected = userAnswers[question.id] === option.value

            html += `
                <label class="option ${isSelected ? 'selected' : ''}">
                  <input type="radio" name="${question.id}" value="${option.value}" ${isSelected ? 'checked' : ''}>
                  <span class="option-radio"></span>
                  ${option.text}
                </label>
              `
          })
          html += `</div>`
        }

        html += `</div>`
        questionContainer.innerHTML = html

        // Reset validation message
        validationMessage.style.display = 'none'

        // Add event listeners for the current question
        if (question.type === 'rating') {
          const radioButtons = document.querySelectorAll(
            `input[name="${question.id}"]`
          )

          radioButtons.forEach((radio) => {
            radio.addEventListener('change', function () {
              if (this.checked) {
                userAnswers[question.id] = parseInt(this.value)
              }
            })
          })

          // Set default value if none selected
          if (
            userAnswers[question.id] === undefined &&
            radioButtons.length > 0
          ) {
            radioButtons[Math.floor(radioButtons.length / 2)].click()
          }
        } else if (question.type === 'options') {
          const radioButtons = document.querySelectorAll(
            `input[name="${question.id}"]`
          )

          radioButtons.forEach((radio) => {
            radio.addEventListener('change', function () {
              if (this.checked) {
                // Update selected class on options
                document.querySelectorAll(`.option`).forEach((opt) => {
                  opt.classList.remove('selected')
                })
                this.closest('.option').classList.add('selected')

                // Save answer
                userAnswers[question.id] = this.value
              }
            })
          })

          // Select first option by default if none selected
          if (
            userAnswers[question.id] === undefined &&
            radioButtons.length > 0
          ) {
            radioButtons[0].click()
          }
        }
      }

      // Update progress bar
      function updateProgressBar() {
        const progress = ((currentQuestionIndex + 1) / questions.length) * 100
        progressFill.style.width = `${progress}%`
      }

      // Update navigation buttons
      function updateNavigationButtons() {
        prevButton.disabled = currentQuestionIndex === 0

        if (currentQuestionIndex === questions.length - 1) {
          nextButton.textContent = 'See Results'
        } else {
          nextButton.textContent = 'Next'
        }
      }

      // Go to previous question
      function goToPreviousQuestion() {
        if (currentQuestionIndex > 0) {
          currentQuestionIndex--
          renderQuestion(currentQuestionIndex)
          updateProgressBar()
          updateNavigationButtons()
        }
      }

      // Go to next question or show results
      function goToNextQuestion() {
        const currentQuestion = questions[currentQuestionIndex]

        // Validate that an answer has been selected
        if (userAnswers[currentQuestion.id] === undefined) {
          validationMessage.style.display = 'block'
          return
        }

        if (currentQuestionIndex < questions.length - 1) {
          currentQuestionIndex++
          renderQuestion(currentQuestionIndex)
          updateProgressBar()
          updateNavigationButtons()
        } else {
          showResults()
        }
      }

      // Show results
      function showResults() {
        // Calculate matches
        const matches = careerPaths
          .map((career) => {
            const matchScore = career.match(userAnswers)
            return {
              ...career,
              matchScore
            }
          })
          .sort((a, b) => b.matchScore - a.matchScore)

        // Get top 3 matches
        const topMatches = matches.slice(0, 3)

        // Log percentages to console
        console.log('Career Match Percentages:')
        topMatches.forEach((career, index) => {
          console.log(`${index + 1}. ${career.title}: ${career.matchScore}%`)
        })

        // Generate HTML for detailed results
        let resultsHTML = ''

        topMatches.forEach((career, index) => {
          resultsHTML += `
            <div class="career-match">
              <div class="match-info">
                <h3><span class="medal">${
                  index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉'
                }</span> ${career.title}</h3>
                <p>${career.description}</p>
                <div class="match-details">
                  <p><strong>Match Score:</strong> ${career.matchScore}%</p>
                  <p><strong>Relevant degrees:</strong> ${career.degrees.join(
                    ', '
                  )}</p>
                  <p><strong>Key skills:</strong></p>
                  <div>
                    ${career.skills
                      .map((skill) => `<span class="skill-tag">${skill}</span>`)
                      .join('')}
                  </div>
                  <p>${career.details}</p>
                </div>
              </div>
            </div>
            `
        })

        resultsContent.innerHTML = resultsHTML

        // Hide quiz, show results
        quizContainer.style.display = 'none'
        resultsContainer.classList.add('active')
      }

      // Restart quiz
      function restartQuiz() {
        // Reset state
        currentQuestionIndex = 0
        Object.keys(userAnswers).forEach((key) => delete userAnswers[key])

        // Reset UI
        quizContainer.style.display = 'block'
        resultsContainer.classList.remove('active')

        // Start over
        renderQuestion(currentQuestionIndex)
        updateProgressBar()
        updateNavigationButtons()
      }

      // Start the application
      document.addEventListener('DOMContentLoaded', initQuiz)
    </script>
  </body>
</html>
